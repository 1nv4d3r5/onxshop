<?php
/**
 * class common_email_form
 *
 * Copyright (c) 2009-2011 Laposa Ltd (http://laposa.co.uk)
 * Licensed under the New BSD License. See the file LICENSE.txt for details.
 *
 */
 
class common_email_form extends Onxshop_Model {

	/**
	 * @access private
	 */
	var $id;
	/**
	 * @access private
	 */
	var $email_from;
	/**
	 * @access private
	 */
	var $name_from;
	/**
	 * @access private
	 */
	var $subject;
	/**
	 * @access private
	 */
	var $content;
	
	var $template;
	
	/**
	 * @access private
	 */
	var $email_recipient;
	/**
	 * @access private
	 */
	var $name_recipient;
	
	var $created;
	
	var $ip;
	
	var $_hashMap = array(
		'id'=>array('label' => 'ID', 'validation'=>'int', 'required'=>true), 
		'email_from'=>array('label' => '', 'validation'=>'email', 'required'=>true),
		'name_from'=>array('label' => '', 'validation'=>'string', 'required'=>true),
		'subject'=>array('label' => '', 'validation'=>'string', 'required'=>true),
		'content'=>array('label' => '', 'validation'=>'string', 'required'=>true),
		'template'=>array('label' => '', 'validation'=>'string', 'required'=>true),
		'email_recipient'=>array('label' => '', 'validation'=>'email', 'required'=>true),
		'name_recipient'=>array('label' => '', 'validation'=>'string', 'required'=>true), 
		'created'=>array('label' => '', 'validation'=>'datetime', 'required'=>true),
		'ip'=>array('label' => '', 'validation'=>'string', 'required'=>true)
	);


	var $_form_data_valid;


	/**
	 * init configuration
	 */
	 
	static function initConfiguration() {
	
		if (array_key_exists('common_email_form', $GLOBALS['onxshop_conf'])) $conf = $GLOBALS['onxshop_conf']['common_email_form'];
		else $conf = array();
		
		/**
		 * set default values if empty
		 */
		// what is default email FROM address?
		if ($conf['mail_sender_address'] == '') $conf['mail_sender_address'] = $GLOBALS['onxshop_conf']['global']['admin_email'];
		if ($conf['mail_sender_name'] == '') $conf['mail_sender_name'] = $GLOBALS['onxshop_conf']['global']['admin_email_name'];
		// what is default email TO address?
		if ($conf['mail_recipient_address'] == '') $conf['mail_recipient_address'] = $GLOBALS['onxshop_conf']['global']['admin_email'];
		if ($conf['mail_recipient_name'] == '') $conf['mail_recipient_name'] = $GLOBALS['onxshop_conf']['global']['admin_email_name'];
		// where to send blind copy of all email generated by the system?
		if ($conf['mail_bcc_address'] == '') $conf['mail_bcc_address'] = false;
		if ($conf['mail_bcc_name'] == '') $conf['mail_bcc_name'] = false;
		// if the COMMON_EMAIL_FORM_SMTP_SERVER is defined, we'll use that SMTP server
		if ($conf['smtp_server_address'] == '') $conf['smtp_server_address'] = false;
		if ($conf['smtp_server_username'] == '') $conf['smtp_server_username'] = false;
		if ($conf['smtp_server_password'] == '') $conf['smtp_server_password'] = false;

		return $conf;
	}
	
	/**
	 * explore form data
	 */
	
	function exploreFormData($items) {
	
		$this->_form_data_valid = array();

		if (count($items) > 0) {
		
			//check for require items and creating of message
			while (list ($key, $val) = each ($items)) {
				
				$val = htmlspecialchars($val, ENT_QUOTES, 'UTF-8');

				if (preg_match('/required/', $key) && trim($val) == "") {
					$key = $this->_formatKey($key);
					msg("Missing: $key", 'error');
					$this->setFormDataValid($key, false);
				}

				$key = $this->_formatKey($key);

				// the set() is stripping \n
				if ($key == 'Message') {
					$c = "<br />$key:\n$val<br />";
				} else {
					$c = "$key: $val";
				}

				$c = "\n$c";

				$content = $content . $c;
			}

			if ($this->getFormDataValid()) $this->setValid('content', true);
			else $this->setValid('content', false);

			return $content;
		}
	}
	
	/**
	 * get valid
	 */
  
	function getFormDataValid() {
	
		if (is_array($this->_form_data_valid)) {
			if (in_array(false, $this->_form_data_valid)) return false;
			else return true;
		} else return false;
	}

	/**
	 * set valid
	 */
	 
	function setFormDataValid($key, $value) {
	
		$this->_form_data_valid[$key] = $value;
		//print_r($this->_valid);
	}

	/**
	 * format key
	 */
	 
	function _formatKey($key) {
	
		$key = preg_replace("/required_/","",$key);
		$key = preg_replace("/_/"," ",$key);
		$key = ucfirst($key);
		return $key;
	}

	/**
	 * send email
	 */
	 
	function sendEmail($template, $content = 'n/a', $email_recipient = false, $name_recipient = false, $email_from = false, $name_from = false) {
		
		if (!$email_recipient) $email_recipient = $this->conf['mail_recipient_address'];
		if (!$name_recipient) $name_recipient = $this->conf['mail_recipient_name'];
		if (!$email_from) $email_from = $this->conf['mail_sender_address'];
		if (!$name_from) $name_from = $this->conf['mail_sender_name'];
		
		$this->set('content', $content);
	
		$this->set('email_from', $email_from);
		$this->set('name_from', $name_from);
		$this->set('template', $template);
		$this->set('email_recipient', $email_recipient);
		$this->set('name_recipient', $name_recipient);
		$this->set('created', date('c'));
		$this->set('ip', $_SERVER['REMOTE_ADDR']);
 
		if ($this->getValid()) {
			if ($this->send()) {
				if ($this->insert()) {
					return true;
				} else {
					//TODO: notify admin
					msg("Can't insert email record into the database", "error", 1);
				}
			} else {
				//TODO: notify admin
				msg("Can't send email with mail->send()", "error");
			}
		} else {
	        	return false;
		}
  	}
	
	/**
	 * send
	 */
	 
	function send() {
	
		$email_data = $this->_format($this->template);
		$this->set('subject', $email_data['title']);

		require_once 'Zend/Mail.php';
		
		$mail = new Zend_Mail('utf-8');
		$mail->addHeader('X-MailGenerator', ONXSHOP_VERSION);

		$mail->setFrom($this->get('email_from'), $this->get('name_from'));
		$mail->addTo($this->get('email_recipient'), $this->get('name_recipient'));
		$mail->setSubject($this->get('subject'));


		//send BCC of all emails to specified address
		if ($this->conf['mail_bcc_address']) $mail->addBcc($this->conf['mail_bcc_address'], $this->conf['mail_bcc_name']);
 
		if ($this->conf['smtp_server_address']) {
			msg ("use SMTP " . $this->conf['smtp_server_address'], 'ok', 2);

			require_once 'Zend/Mail/Transport/Smtp.php';
			
			if ($this->conf['smtp_server_username'] && $this->conf['smtp_server_password']) {
				msg('using SMTP auth', 'ok', 2);
				$config = array('auth' => 'login',
                			'username' => $this->conf['smtp_server_username'],
                			'password' => $this->conf['smtp_server_password']);
			} else {
				$config = array();
				msg("Not using SMTP auth", 'ok', 2);
			}

			$transport = new Zend_Mail_Transport_Smtp($this->conf['smtp_server_address'], $config);
			Zend_Mail::setDefaultTransport($transport);
		} else {
			msg('use internal mail()', 'ok', 2);
		}

		/**
		 * attachment(s)
		 */
		 
		if (count($_FILES) > 0) {
		
			foreach ($_FILES as $key=>$file) {
			
				if (is_uploaded_file($file['tmp_name'])) {
		
					/**
					 * file
					 */
					 
					require_once('models/common/common_file.php');
					//getSingleUpload could be static method
					$File = new common_file();
					$upload = $File->getSingleUpload($file, 'var/tmp/');
					
					/**
					 * array indicated the same file name already exists in the var/tmp/ folder
					 * we can ignore it, as the previous attachement was overwritten
					 * FIXME: could be a problem when more users submit the same filename in the same time
					 * perhaps saving file with PHP session id or not saving in var/tmp would help
					 */
					 
					if (is_array($upload)) {
						$attachment_saved_file = ONXSHOP_PROJECT_DIR . $upload['temp_file'];
					} else {
						$attachment_saved_file = ONXSHOP_PROJECT_DIR . $upload;
					}
					
					/**
					 * check if file exists and than add to email as attachemnt
					 */
					 
					if (file_exists($attachment_saved_file)) {
						$attachment_info = $File->getFileInfo($attachment_saved_file);
						$Attachment = $mail->createAttachment(file_get_contents($attachment_saved_file));
						$Attachment->filename = $attachment_info['filename'];
					}
				}
			}
		}

		/**
		 * content alternative text
		 */
		 
		$mail->setBodyText($email_data['content']['txt']);
		$mail->setBodyHtml($email_data['content']['html']);

		/**
		 * send
		 */
		 
		if(!$mail->send()) {
			msg('The email was not sent! Some problem with email sending.', 'error');
			return false;
		} else {
			msg("The email to {$this->email_recipient} has been sent successfully.", 'ok', 2);
			return true;
		}
	}

	/**
	 * format
	 */
	 
	function _format($template) {
	
		$orig = $this->get('content');

		$this->content = nl2br($this->get('content'));
		$tpl = new XTemplate("$template.html", getTemplateDir("$template.html", 'mail/')); 		

		$vars = get_object_vars($this);
		$tpl->assign('EMAIL', $vars);

		//read passed data
		if (is_array($GLOBALS['common_email_form'])) {
			$tpl->assign('DATA', $GLOBALS['common_email_form']);
		}

		// from $nSite->_initTemplateVariables
		if ($_SERVER['HTTPS']) $protocol = 'https';
		else $protocol = 'http';
		
		$tpl->assign('URI', "$protocol://{$_SERVER['SERVER_NAME']}{$_SERVER['REQUEST_URI']}");
		$tpl->assign('_SERVER', $_SERVER);
		$tpl->assign('CONFIGURATION', $GLOBALS['onxshop_conf']);
		$tpl->assign('TIME', time());
		
		/**
		 * include node configuration
		 */
				
		require_once('models/common/common_node.php');
		$node_conf = common_node::initConfiguration();
		$tpl->assign('NODE_CONF', $node_conf);
		
		/**
		 * parse
		 */

		$tpl->parse('title');
		$tpl->parse('content');

		$this->content = $orig;

		$data['title'] = $tpl->text('title');
		$data['content']['html'] = $tpl->text('content');

		//get the text version
		$data['content']['txt'] = html2text($data['content']['html']);

		//convert relative links to absolute
		$data['content']['html'] = $this->rel2abs("http://{$_SERVER['HTTP_HOST']}", $data['content']['html']);
		$data['content']['txt'] = $this->rel2abs("http://{$_SERVER['HTTP_HOST']}", $data['content']['txt']);

		return $data;
	}

	
	/**
	 * rewrite relative link to absolute, ie when integration a remote source
	 *
	 * @param unknown_type $url
	 * @param unknown_type $html
	 * @return unknown
	 */
	 
	function rel2abs($url, $html) {
	
		/*
		href="" ''
		no javascript
		src="" ''
		and href=\'index.php\'
		*/
	    $html = preg_replace("/href=[\"\'](?!JavaScript)(?!http)(.*)[\"\']/i","href=\"$url\\1\"",$html);
	    $html = preg_replace("/src=[\"\'](?!JavaScript)(?!http)(.*)[\"\']/i","src=\"$url\\1\"",$html);
	    $html = preg_replace("/action=[\"\'](?!JavaScript)(?!http)(.*)[\"\']/i","action=\"$url\\1\"",$html);
		//$abs_html = preg_replace( "/(?<!href=\")((http|ftp)+(s)?:\/\/[^<>\s]+)/i", "href=\"$url\\0\"", $html );
	    return $html;
	}
}
